/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * OAS 3.1.0 Playground
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";
import { httpClient } from "../../httpClient";

/**
 * specified at description
 */
export const specifiedAtOperationId = (required: string) => {
  return httpClient<void>({ url: `/operationId/${required}`, method: "POST" });
};

export const getSpecifiedAtOperationIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof specifiedAtOperationId>>,
    TError,
    { required: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof specifiedAtOperationId>>,
  TError,
  { required: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof specifiedAtOperationId>>,
    { required: string }
  > = (props) => {
    const { required } = props ?? {};

    return specifiedAtOperationId(required);
  };

  return { mutationFn, ...mutationOptions };
};

export type SpecifiedAtOperationIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof specifiedAtOperationId>>
>;

export type SpecifiedAtOperationIdMutationError = unknown;

export const useSpecifiedAtOperationId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof specifiedAtOperationId>>,
    TError,
    { required: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof specifiedAtOperationId>>,
  TError,
  { required: string },
  TContext
> => {
  const mutationOptions = getSpecifiedAtOperationIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * specified at description
 */
export const putOperationIdRequired = (required: string) => {
  return httpClient<void>({ url: `/operationId/${required}`, method: "PUT" });
};

export const getPutOperationIdRequiredMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putOperationIdRequired>>,
    TError,
    { required: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putOperationIdRequired>>,
  TError,
  { required: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putOperationIdRequired>>,
    { required: string }
  > = (props) => {
    const { required } = props ?? {};

    return putOperationIdRequired(required);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutOperationIdRequiredMutationResult = NonNullable<
  Awaited<ReturnType<typeof putOperationIdRequired>>
>;

export type PutOperationIdRequiredMutationError = unknown;

export const usePutOperationIdRequired = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putOperationIdRequired>>,
    TError,
    { required: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putOperationIdRequired>>,
  TError,
  { required: string },
  TContext
> => {
  const mutationOptions = getPutOperationIdRequiredMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteOperationIdRequired = (required: string) => {
  return httpClient<void>({
    url: `/operationId/${required}`,
    method: "DELETE",
  });
};

export const getDeleteOperationIdRequiredMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteOperationIdRequired>>,
    TError,
    { required: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteOperationIdRequired>>,
  TError,
  { required: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteOperationIdRequired>>,
    { required: string }
  > = (props) => {
    const { required } = props ?? {};

    return deleteOperationIdRequired(required);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteOperationIdRequiredMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteOperationIdRequired>>
>;

export type DeleteOperationIdRequiredMutationError = unknown;

export const useDeleteOperationIdRequired = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteOperationIdRequired>>,
    TError,
    { required: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteOperationIdRequired>>,
  TError,
  { required: string },
  TContext
> => {
  const mutationOptions = getDeleteOperationIdRequiredMutationOptions(options);

  return useMutation(mutationOptions);
};
