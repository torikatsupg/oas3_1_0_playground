/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * OAS 3.1.0 Playground
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import { Enum } from "../oAS310Playground.schemas";

export const getPostMultipartFormDataRequiredNullableOptionalResponseMock = (
  overrideResponse: any = {},
): Blob => ({
  array: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.word.sample()),
  boolean: faker.datatype.boolean(),
  date: faker.helpers.arrayElement([
    faker.date.past().toISOString().split("T")[0],
    undefined,
  ]),
  "date-time": faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  double: faker.number.int({ min: undefined, max: undefined }),
  enum: faker.helpers.arrayElement(Object.values(Enum)),
  float: faker.number.int({ min: undefined, max: undefined }),
  int32: faker.number.int({ min: undefined, max: undefined }),
  int64: faker.number.int({ min: undefined, max: undefined }),
  integer: faker.number.int({ min: undefined, max: undefined }),
  nullable: {},
  number: faker.number.int({ min: undefined, max: undefined }),
  object: {
    key: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
  },
  optional: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  password: faker.internet.password(),
  required: faker.word.sample(),
  ...overrideResponse,
});

export const getPostMultipartFormDataRequiredNullableOptionalMockHandler = (
  overrideResponse?: Blob,
) => {
  return http.post(
    "*/multipart_form-data/:required/:nullable/:optional",
    async () => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse
            ? overrideResponse
            : getPostMultipartFormDataRequiredNullableOptionalResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      );
    },
  );
};
export const getMultipartFormDataMock = () => [
  getPostMultipartFormDataRequiredNullableOptionalMockHandler(),
];
