/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * OAS 3.1.0 Playground
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  AllTypes,
  PostMultipartFormDataRequiredNullableOptionalParams
} from '../oAS310Playground.schemas'
import { httpClient } from '../../httpClient';



export const postMultipartFormDataRequiredNullableOptional = (
    required: string,
    nullable: string | null,
    allTypes: AllTypes,
    params: PostMultipartFormDataRequiredNullableOptionalParams,
    optional?: string,
 ) => {
      
      const formData = new FormData();
formData.append('required', allTypes.required)
formData.append('nullable', allTypes.nullable)
if(allTypes.optional !== undefined) {
 formData.append('optional', allTypes.optional)
 }
formData.append('boolean', allTypes.boolean.toString())
formData.append('number', allTypes.number.toString())
if(allTypes.integer !== undefined) {
 formData.append('integer', allTypes.integer.toString())
 }
formData.append('object', JSON.stringify(allTypes.object));
allTypes.array.forEach(value => formData.append('array', value));
formData.append('enum', allTypes.enum)
formData.append('int64', allTypes.int64.toString())
formData.append('int32', allTypes.int32.toString())
formData.append('float', allTypes.float.toString())
formData.append('double', allTypes.double.toString())
formData.append('password', allTypes.password)

      return httpClient<Blob>(
      {url: `/multipart_form-data/${required}/${nullable}/${optional}`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData,
        params,
        responseType: 'blob'
    },
      );
    }
  


export const getPostMultipartFormDataRequiredNullableOptionalMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMultipartFormDataRequiredNullableOptional>>, TError,{required: string;nullable: string | null;data: AllTypes;params: PostMultipartFormDataRequiredNullableOptionalParams;optional?: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postMultipartFormDataRequiredNullableOptional>>, TError,{required: string;nullable: string | null;data: AllTypes;params: PostMultipartFormDataRequiredNullableOptionalParams;optional?: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMultipartFormDataRequiredNullableOptional>>, {required: string;nullable: string | null;data: AllTypes;params: PostMultipartFormDataRequiredNullableOptionalParams;optional?: string}> = (props) => {
          const {required,nullable,data,params,optional} = props ?? {};

          return  postMultipartFormDataRequiredNullableOptional(required,nullable,data,params,optional,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMultipartFormDataRequiredNullableOptionalMutationResult = NonNullable<Awaited<ReturnType<typeof postMultipartFormDataRequiredNullableOptional>>>
    export type PostMultipartFormDataRequiredNullableOptionalMutationBody = AllTypes
    export type PostMultipartFormDataRequiredNullableOptionalMutationError = unknown

    export const usePostMultipartFormDataRequiredNullableOptional = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMultipartFormDataRequiredNullableOptional>>, TError,{required: string;nullable: string | null;data: AllTypes;params: PostMultipartFormDataRequiredNullableOptionalParams;optional?: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postMultipartFormDataRequiredNullableOptional>>,
        TError,
        {required: string;nullable: string | null;data: AllTypes;params: PostMultipartFormDataRequiredNullableOptionalParams;optional?: string},
        TContext
      > => {

      const mutationOptions = getPostMultipartFormDataRequiredNullableOptionalMutationOptions(options);

      return useMutation(mutationOptions);
    }
    