/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * OAS 3.1.0 Playground
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";
import type {
  MultipartFormData,
  PostMultipartFormDataRequiredNullableOptionalParams,
} from "../oAS310Playground.schemas";
import { httpClient } from "../../httpClient";

export const postMultipartFormDataRequiredNullableOptional = (
  required: string,
  nullable: string | null,
  multipartFormData: MultipartFormData,
  params: PostMultipartFormDataRequiredNullableOptionalParams,
  optional?: string,
) => {
  const formData = new FormData();
  formData.append("required", multipartFormData.required);
  formData.append("nullable", multipartFormData.nullable);
  if (multipartFormData.optional !== undefined) {
    formData.append("optional", multipartFormData.optional);
  }
  formData.append("boolean", multipartFormData.boolean.toString());
  formData.append("number", multipartFormData.number.toString());
  formData.append("integer", multipartFormData.integer.toString());
  formData.append("object", JSON.stringify(multipartFormData.object));
  multipartFormData.array.forEach((value) => formData.append("array", value));
  formData.append("enum", multipartFormData.enum);
  formData.append("int64", multipartFormData.int64.toString());
  formData.append("int32", multipartFormData.int32.toString());
  formData.append("float", multipartFormData.float.toString());
  formData.append("double", multipartFormData.double.toString());
  formData.append("password", multipartFormData.password);

  return httpClient<Blob>({
    url: `/multipart_form-data/${required}/${nullable}/${optional}`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
    responseType: "blob",
  });
};

export const getPostMultipartFormDataRequiredNullableOptionalMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMultipartFormDataRequiredNullableOptional>>,
    TError,
    {
      required: string;
      nullable: string | null;
      data: MultipartFormData;
      params: PostMultipartFormDataRequiredNullableOptionalParams;
      optional?: string;
    },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMultipartFormDataRequiredNullableOptional>>,
  TError,
  {
    required: string;
    nullable: string | null;
    data: MultipartFormData;
    params: PostMultipartFormDataRequiredNullableOptionalParams;
    optional?: string;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMultipartFormDataRequiredNullableOptional>>,
    {
      required: string;
      nullable: string | null;
      data: MultipartFormData;
      params: PostMultipartFormDataRequiredNullableOptionalParams;
      optional?: string;
    }
  > = (props) => {
    const { required, nullable, data, params, optional } = props ?? {};

    return postMultipartFormDataRequiredNullableOptional(
      required,
      nullable,
      data,
      params,
      optional,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMultipartFormDataRequiredNullableOptionalMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof postMultipartFormDataRequiredNullableOptional>>
  >;
export type PostMultipartFormDataRequiredNullableOptionalMutationBody =
  MultipartFormData;
export type PostMultipartFormDataRequiredNullableOptionalMutationError =
  unknown;

export const usePostMultipartFormDataRequiredNullableOptional = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMultipartFormDataRequiredNullableOptional>>,
    TError,
    {
      required: string;
      nullable: string | null;
      data: MultipartFormData;
      params: PostMultipartFormDataRequiredNullableOptionalParams;
      optional?: string;
    },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postMultipartFormDataRequiredNullableOptional>>,
  TError,
  {
    required: string;
    nullable: string | null;
    data: MultipartFormData;
    params: PostMultipartFormDataRequiredNullableOptionalParams;
    optional?: string;
  },
  TContext
> => {
  const mutationOptions =
    getPostMultipartFormDataRequiredNullableOptionalMutationOptions(options);

  return useMutation(mutationOptions);
};
